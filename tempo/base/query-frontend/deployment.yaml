apiVersion: apps/v1
kind: Deployment
metadata:
  name: &app tempo-query-frontend
  labels:
    app: *app
  annotations:
    "app.uw.systems/description": "Tempo query-frontend are responsible for sharding incoming requests for faster processing in parallel (by the queriers)"
    "app.uw.systems/tier": "tier_3"
    "app.uw.systems/tags.oss": "true"
    "app.uw.systems/repos.manifests": "https://github.com/utilitywarehouse/opentelemetry-manifests"
    "app.uw.systems/repos.tempo": "https://github.com/grafana/tempo"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: *app
  template:
    metadata:
      name: *app
      labels:
        app: *app
      annotations:
        injector.tumblr.com/request: vault-sidecar-aws
        prometheus.io/scrape: "true"
        prometheus.io/port: "3200"
        prometheus.io/path: /metrics
    spec:
      serviceAccountName: tempo
      containers:
        - name: query-frontend
          image: tempo
          args:
            - -target=query-frontend
            - -config.file=/conf/tempo.yaml
            - -config.expand-env=true
            - -shutdown-delay=15s
          env:
            - name: GOMEMLIMIT
              value: "1500MiB"
          envFrom:
            - configMapRef:
                name: tempo-config-overlay
          resources:
            requests:
              cpu: 50m
              memory: 500Mi
            limits:
              cpu: "2"
              memory: 2Gi
          readinessProbe:
            httpGet:
              path: /ready
              port: 3200
            initialDelaySeconds: 15
            timeoutSeconds: 1
          ports:
            - name: prom-metrics
              containerPort: 3200
          volumeMounts:
            - name: tempo-config-vol
              mountPath: /conf
      volumes:
        - name: tempo-config-vol
          configMap:
            name: tempo
